#
# Production server with UWSGI configured to run on port 8080
# and web configured to run directly on port 80
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.

version: "3"
services:

  smtp:
    # Note you cannot scale if you use container_name
    container_name: sms-survey-dashboard-smtp
    image: catatnight/postfix
    hostname: postfix
    environment:
      # You could change this to something more suitable
      - maildomain=digiprophets.com
      - smtp_user=noreply:docker
    restart: unless-stopped
    networks:
      - backend

  db:
    # Note you cannot scale if you use container_name
    container_name: sms-survey-dashboard-db
    image: kartoza/postgis:9.6-2.4
    volumes:
      # - ./pg/postgres_data:/var/lib/postgresql
      - ./backups:/backups
      - ./sql:/sql
    environment:
      - USERNAME=docker
      - PASS=docker
    restart: unless-stopped
    networks:
      backend:
        aliases:
            - db
  #  Uncomment the next line to have an access with PGAdmin using localhost and port 25432 on your computer.
  #  Only for development !
  #  ports:
  #    - "25432:5432"

  uwsgi:
    # Note you cannot scale if you use container_name
    &uwsgi
    container_name: sms-survey-dashboard-uwsgi
    build:
      context: ./docker
      dockerfile: Dockerfile
    hostname: uwsgi
    links:
      - redis:redis
    environment:
      - DEBUG=True
      - DATABASE_NAME=gis
      - DATABASE_USERNAME=docker
      - DATABASE_PASSWORD=docker
      - DATABASE_HOST=db
      - DJANGO_SETTINGS_MODULE=core.settings.dev_docker
      - VIRTUAL_HOST=sms-survey-dashboard.com
      - VIRTUAL_PORT=8080
      - RABBITMQ_HOST=rabbitmq
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - CONTACT_US_EMAIL=alison@digiprophets.com
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static:rw
      - ./media:/home/web/media:rw
      - ./reports:/home/web/reports
      - ./logs:/var/log/
    restart: on-failure:5
    user: root
    networks:
      backend:
        aliases:
          - uwsgi

  # dbbackups:
  #   # Note you cannot scale if you use container_name
  #   container_name: sms-survey-dashboard-db-backups
  #   image: kartoza/pg-backup:9.4
  #   hostname: pg-backups
  #   volumes:
  #     - ./backups:/backups
  #   environment:
  #     # take care to let the project name below match that
  #     # declared in the top of the makefile
  #     - DUMPPREFIX=PG_sms-survey-dashboard
  #     # These are all defaults anyway, but setting explicitly in
  #     # case we ever want to ever use different credentials
  #     - PGUSER=docker
  #     - PGPASSWORD=docker
  #     - PGPORT=5432
  #     - PGHOST=db
  #     - PGDATABASE=gis
  #   restart: unless-stopped
  #   networks:
  #     - backend

  # This is normally the main entry point for a production server
  web:
    # Note you cannot scale if you use container_name
    container_name: sms-survey-dashboard-web
    image: nginx
    hostname: nginx
    depends_on:
      - uwsgi
      - db
    volumes:
      - ./sites-enabled:/etc/nginx/conf.d:ro
      # I dont use volumes_from as I want to use the ro modifier
      - ./static:/home/web/static:ro
      - ./media:/home/web/media:ro
      - ./logs:/var/log/nginx
    ports:
      - "8005:8080"
    restart: unless-stopped
    networks:
      - backend

  # btsync-db:
  #   # BTSync backups for database dumps
  #   image: kartoza/btsync
  #   restart: unless-stopped
  #   volumes:
  #     # We mount RW so that we can use remove peer to clean up old backups off the server
  #     - ./backups:/web:rw
  #   env_file:
  #     # The environment file should define two variables:
  #     # SECRET: a RW btsync key if the server is a production server
  #     #         a RO btsync key if it is staging or development machine
  #     # DEVICE: a unique device name so you can recognise which host is being peered with in btsync
  #     # See the btsync example env in this folder for a template
  #     # NOTE:
  #     # Do not version control the env file as anyone else could peer it and sync
  #     # our database backups etc.
  #     - btsync-db.env

  # btsync-media:
  #   # BTSync backups for django media
  #   image: kartoza/btsync
  #   restart: unless-stopped
  #   volumes:
  #     # We mount RO as we do not really want peers to change this data
  #     - ./media:/web:ro
  #   env_file:
  #     # The environment file should define two variables:
  #     # SECRET: a RW btsync key if the server is a production server
  #     #         a RO bts ync key if it is staging or development machine
  #     # DEVICE: a unique device name so you can recognise which host is being peered with in btsync
  #     # See the btsync example env in this folder for a template
  #     # NOTE:
  #     # Do not version control the env file as anyone else could peer it and sync
  #     # our media backups etc.
  #     - btsync-media.env

  redis:
    image: redis:6
    container_name: redis-cache
    restart: unless-stopped
    networks:
      - backend

  worker:
    <<: *uwsgi
    build: docker
    hostname: worker
    container_name: worker
    command: celery -A core.celery worker -l INFO

    volumes:
      - ../django_project:/home/web/django_project
      - ./static:/home/web/static:rw
      - ./media:/home/web/media:rw
      - ./reports:/home/web/reports
      - ./logs:/var/log/
    restart: on-failure:5
    depends_on:
      - redis
      - uwsgi

    networks:
      - backend

  graphql:
    image: hasura/graphql-engine:v1.3.3
    hostname: graphQL
    restart: always
    environment: 
      - HASURA_GRAPHQL_DATABASE_URL=postgres://docker:docker@db:5432/gis
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_ADMIN_SECRET=docker
    ports:
      - "8006:8080"
    networks:
      - backend

networks:
  backend:
